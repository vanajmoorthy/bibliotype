# .github/workflows/django-tests.yml

name: Django CI

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

jobs:
    build-and-test:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:15-alpine
                env:
                    POSTGRES_DB: testdb
                    POSTGRES_USER: testuser
                    POSTGRES_PASSWORD: testpass
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            redis:
                image: redis:7-alpine

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Set up .env file for testing
              run: |
                  echo "SECRET_KEY=ci-secret-key-for-testing" >> .env
                  echo "DATABASE_URL=postgres://testuser:testpass@postgres:5432/testdb" >> .env
                  echo "CELERY_BROKER_URL=redis://redis:6379/0" >> .env
                  echo "CELERY_RESULT_BACKEND=redis://redis:6379/0" >> .env
                  echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env

            - name: Build the Docker image
              run: docker compose -f docker-compose.local.yml build web

            - name: Run Migrations
              # Use --no-deps because postgres and redis are already running via the 'services' block
              run: docker compose -f docker-compose.local.yml run --rm --no-deps web poetry run python manage.py migrate

            - name: Run tests
              # Use --no-deps here as well for the same reason
              run: docker compose -f docker-compose.local.yml run --rm --no-deps web poetry run python manage.py test
