name: Deploy to DigitalOcean

on:
    push:
        branches:
            - main
jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Get commit hash
              id: vars
              run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  # Tag with both 'latest' for convenience and the specific commit hash for reliability
                  tags: |
                      ${{ secrets.DOCKERHUB_USERNAME }}/bibliotype:latest
                      ${{ secrets.DOCKERHUB_USERNAME }}/bibliotype:${{ steps.vars.outputs.sha_short }}

            - name: Deploy to DigitalOcean VPS
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.DO_SSH_HOST }}
                  username: ${{ secrets.DO_SSH_USERNAME }}
                  key: ${{ secrets.DO_SSH_KEY }}
                  script: |
                      # Set environment variable for the image tag
                      export IMAGE_TAG=${{ steps.vars.outputs.sha_short }}
                      export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}

                      cd /home/bibliotype/app

                      # Update the docker-compose.prod.yml file on the server to use the new image tag
                      # This is safer than passing it as a command-line variable
                      sed -i "s|image: .*|image: $DOCKERHUB_USERNAME/bibliotype:$IMAGE_TAG|" docker-compose.prod.yml

                      # Pull the newly pushed, specifically tagged image
                      docker pull $DOCKERHUB_USERNAME/bibliotype:$IMAGE_TAG

                      # Restart the services. Docker Compose is smart and will only
                      # recreate the 'web' service because its image has changed.
                      docker-compose -f docker-compose.prod.yml up -d

                      # Run migrations AFTER the new code is running
                      docker-compose -f docker-compose.prod.yml exec -T web poetry run python manage.py migrate --noinput

                      # Clean up old, unused images to save disk space
                      docker image prune -f
