# Generated by Django 5.2.5 on 2025-10-01 23:15

import django.db.models.deletion
from django.db import migrations, models
import re


def _normalize_for_migration(name):
    """
    A self-contained normalize function for the migration.
    Migrations should not import from the main codebase.
    """
    if not isinstance(name, str):
        return ""
    name = name.lower()
    name = re.sub(r"[^\w\s]", "", name)
    name = re.sub(r"\s+", "", name)
    return name


def migrate_publisher_data(apps, schema_editor):
    """
    Takes the old string from Book.publisher_old, creates or gets a
    Publisher object, and links it to the book.
    """
    Book = apps.get_model("core", "Book")
    Publisher = apps.get_model("core", "Publisher")

    # Use .iterator() for memory efficiency on large datasets
    for book in Book.objects.all().iterator():
        # During a migration, the old field is accessed via the model instance
        publisher_name_str = book.publisher_old
        if publisher_name_str:
            normalized_name = _normalize_for_migration(publisher_name_str)
            # get_or_create the related Publisher
            publisher_obj, _ = Publisher.objects.get_or_create(
                normalized_name=normalized_name, defaults={"name": publisher_name_str}
            )
            book.publisher = publisher_obj
            book.save(update_fields=["publisher"])  # Efficiently save only the changed field


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0016_alter_book_normalized_title"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="book",
            name="awards_won",
        ),
        migrations.RemoveField(
            model_name="book",
            name="canon_lists",
        ),
        migrations.RemoveField(
            model_name="book",
            name="mainstream_score",
        ),
        migrations.RemoveField(
            model_name="book",
            name="nyt_bestseller_weeks",
        ),
        migrations.RemoveField(
            model_name="book",
            name="score_breakdown",
        ),
        migrations.RemoveField(
            model_name="book",
            name="shortlists",
        ),
        migrations.AddField(
            model_name="author",
            name="is_mainstream",
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name="author",
            name="mainstream_last_checked",
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.CreateModel(
            name="Publisher",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("normalized_name", models.CharField(editable=False, max_length=255, unique=True)),
                ("is_mainstream", models.BooleanField(db_index=True, default=False)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subsidiaries",
                        to="core.publisher",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.RenameField(
            model_name="book",
            old_name="publisher",
            new_name="publisher_old",
        ),
        # 2. Create the new ForeignKey field with the final name
        migrations.AddField(
            model_name="book",
            name="publisher",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="books",
                to="core.publisher",
            ),
        ),
        # 3. Run our custom Python code to move the data
        migrations.RunPython(migrate_publisher_data, reverse_code=migrations.RunPython.noop),
        # 4. Remove the old CharField now that the data is safely moved
        migrations.RemoveField(
            model_name="book",
            name="publisher_old",
        ),
    ]
