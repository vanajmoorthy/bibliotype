services:
    db:
        image: postgres:15
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
            interval: 5s
            timeout: 5s
            retries: 5
    redis:
        image: redis:7-alpine
        ports:
            # Optional: Expose Redis port for monitoring tools
            - "6379:6379"

    web:
        build: .
        command: poetry run python manage.py runserver 0.0.0.0:8000
        volumes:
            - .:/app
            - /app/.venv
        ports:
            - "8000:8000"
        environment:
            # This constructs the DATABASE_URL from the other variables
            - DJANGO_ENV=development
            - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
            # These are passed through from your shell's environment (which docker-compose loads from .env)
            - SECRET_KEY=${SECRET_KEY}
            - GEMINI_API_KEY=${GEMINI_API_KEY}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started

    worker:
        build: . # It uses the same image/code as the web service
        # This command starts the Celery worker
        command: sh -c "./wait-for-postgres.sh db && poetry run celery -A bibliotype worker -l info"
        volumes:
            # Mount the entire project for live code reloading on the worker too
            - .:/app
            - /app/.venv
        environment:
            - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
            - CELERY_BROKER_URL=redis://redis:6379/0
            - CELERY_RESULT_BACKEND=redis://redis:6379/0
            - SECRET_KEY=${SECRET_KEY}
            - GEMINI_API_KEY=${GEMINI_API_KEY}
            - DEBUG=True
            - ALLOWED_HOSTS=localhost,127.0.0.1
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        depends_on:
            - db
            - redis
volumes:
    postgres_data:
